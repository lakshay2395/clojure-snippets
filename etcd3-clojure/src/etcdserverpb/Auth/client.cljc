;;;----------------------------------------------------------------------------------
;;; Generated by protoc-gen-clojure.  DO NOT EDIT
;;;
;;; GRPC etcdserverpb.Auth Client Implementation
;;;----------------------------------------------------------------------------------
(ns etcdserverpb.Auth.client
  (:require [etcdserverpb :refer :all]
            [authpb :as authpb]
            [mvccpb :as mvccpb]
            [clojure.core.async :as async]
            [protojure.grpc.client.utils :refer [send-unary-params invoke-unary]]
            [promesa.core :as p]
            [protojure.grpc.client.api :as grpc]))

;-----------------------------------------------------------------------------
; GRPC Client Implementation
;-----------------------------------------------------------------------------

(defn UserList
  [client params]
  (let [input (async/chan 1)
        output (async/chan 1)
        desc {:service "etcdserverpb.Auth"
              :method  "UserList"
              :input   {:f etcdserverpb/new-AuthUserListRequest :ch input}
              :output  {:f etcdserverpb/pb->AuthUserListResponse :ch output}}]
    (-> (send-unary-params input params)
        (p/then (fn [_] (invoke-unary client desc output))))))

(defn AuthDisable
  [client params]
  (let [input (async/chan 1)
        output (async/chan 1)
        desc {:service "etcdserverpb.Auth"
              :method  "AuthDisable"
              :input   {:f etcdserverpb/new-AuthDisableRequest :ch input}
              :output  {:f etcdserverpb/pb->AuthDisableResponse :ch output}}]
    (-> (send-unary-params input params)
        (p/then (fn [_] (invoke-unary client desc output))))))

(defn UserDelete
  [client params]
  (let [input (async/chan 1)
        output (async/chan 1)
        desc {:service "etcdserverpb.Auth"
              :method  "UserDelete"
              :input   {:f etcdserverpb/new-AuthUserDeleteRequest :ch input}
              :output  {:f etcdserverpb/pb->AuthUserDeleteResponse :ch output}}]
    (-> (send-unary-params input params)
        (p/then (fn [_] (invoke-unary client desc output))))))

(defn UserRevokeRole
  [client params]
  (let [input (async/chan 1)
        output (async/chan 1)
        desc {:service "etcdserverpb.Auth"
              :method  "UserRevokeRole"
              :input   {:f etcdserverpb/new-AuthUserRevokeRoleRequest :ch input}
              :output  {:f etcdserverpb/pb->AuthUserRevokeRoleResponse :ch output}}]
    (-> (send-unary-params input params)
        (p/then (fn [_] (invoke-unary client desc output))))))

(defn UserAdd
  [client params]
  (let [input (async/chan 1)
        output (async/chan 1)
        desc {:service "etcdserverpb.Auth"
              :method  "UserAdd"
              :input   {:f etcdserverpb/new-AuthUserAddRequest :ch input}
              :output  {:f etcdserverpb/pb->AuthUserAddResponse :ch output}}]
    (-> (send-unary-params input params)
        (p/then (fn [_] (invoke-unary client desc output))))))

(defn RoleGrantPermission
  [client params]
  (let [input (async/chan 1)
        output (async/chan 1)
        desc {:service "etcdserverpb.Auth"
              :method  "RoleGrantPermission"
              :input   {:f etcdserverpb/new-AuthRoleGrantPermissionRequest :ch input}
              :output  {:f etcdserverpb/pb->AuthRoleGrantPermissionResponse :ch output}}]
    (-> (send-unary-params input params)
        (p/then (fn [_] (invoke-unary client desc output))))))

(defn AuthEnable
  [client params]
  (let [input (async/chan 1)
        output (async/chan 1)
        desc {:service "etcdserverpb.Auth"
              :method  "AuthEnable"
              :input   {:f etcdserverpb/new-AuthEnableRequest :ch input}
              :output  {:f etcdserverpb/pb->AuthEnableResponse :ch output}}]
    (-> (send-unary-params input params)
        (p/then (fn [_] (invoke-unary client desc output))))))

(defn UserGrantRole
  [client params]
  (let [input (async/chan 1)
        output (async/chan 1)
        desc {:service "etcdserverpb.Auth"
              :method  "UserGrantRole"
              :input   {:f etcdserverpb/new-AuthUserGrantRoleRequest :ch input}
              :output  {:f etcdserverpb/pb->AuthUserGrantRoleResponse :ch output}}]
    (-> (send-unary-params input params)
        (p/then (fn [_] (invoke-unary client desc output))))))

(defn RoleRevokePermission
  [client params]
  (let [input (async/chan 1)
        output (async/chan 1)
        desc {:service "etcdserverpb.Auth"
              :method  "RoleRevokePermission"
              :input   {:f etcdserverpb/new-AuthRoleRevokePermissionRequest :ch input}
              :output  {:f etcdserverpb/pb->AuthRoleRevokePermissionResponse :ch output}}]
    (-> (send-unary-params input params)
        (p/then (fn [_] (invoke-unary client desc output))))))

(defn RoleList
  [client params]
  (let [input (async/chan 1)
        output (async/chan 1)
        desc {:service "etcdserverpb.Auth"
              :method  "RoleList"
              :input   {:f etcdserverpb/new-AuthRoleListRequest :ch input}
              :output  {:f etcdserverpb/pb->AuthRoleListResponse :ch output}}]
    (-> (send-unary-params input params)
        (p/then (fn [_] (invoke-unary client desc output))))))

(defn UserGet
  [client params]
  (let [input (async/chan 1)
        output (async/chan 1)
        desc {:service "etcdserverpb.Auth"
              :method  "UserGet"
              :input   {:f etcdserverpb/new-AuthUserGetRequest :ch input}
              :output  {:f etcdserverpb/pb->AuthUserGetResponse :ch output}}]
    (-> (send-unary-params input params)
        (p/then (fn [_] (invoke-unary client desc output))))))

(defn RoleDelete
  [client params]
  (let [input (async/chan 1)
        output (async/chan 1)
        desc {:service "etcdserverpb.Auth"
              :method  "RoleDelete"
              :input   {:f etcdserverpb/new-AuthRoleDeleteRequest :ch input}
              :output  {:f etcdserverpb/pb->AuthRoleDeleteResponse :ch output}}]
    (-> (send-unary-params input params)
        (p/then (fn [_] (invoke-unary client desc output))))))

(defn RoleGet
  [client params]
  (let [input (async/chan 1)
        output (async/chan 1)
        desc {:service "etcdserverpb.Auth"
              :method  "RoleGet"
              :input   {:f etcdserverpb/new-AuthRoleGetRequest :ch input}
              :output  {:f etcdserverpb/pb->AuthRoleGetResponse :ch output}}]
    (-> (send-unary-params input params)
        (p/then (fn [_] (invoke-unary client desc output))))))

(defn RoleAdd
  [client params]
  (let [input (async/chan 1)
        output (async/chan 1)
        desc {:service "etcdserverpb.Auth"
              :method  "RoleAdd"
              :input   {:f etcdserverpb/new-AuthRoleAddRequest :ch input}
              :output  {:f etcdserverpb/pb->AuthRoleAddResponse :ch output}}]
    (-> (send-unary-params input params)
        (p/then (fn [_] (invoke-unary client desc output))))))

(defn Authenticate
  [client params]
  (let [input (async/chan 1)
        output (async/chan 1)
        desc {:service "etcdserverpb.Auth"
              :method  "Authenticate"
              :input   {:f etcdserverpb/new-AuthenticateRequest :ch input}
              :output  {:f etcdserverpb/pb->AuthenticateResponse :ch output}}]
    (-> (send-unary-params input params)
        (p/then (fn [_] (invoke-unary client desc output))))))

(defn UserChangePassword
  [client params]
  (let [input (async/chan 1)
        output (async/chan 1)
        desc {:service "etcdserverpb.Auth"
              :method  "UserChangePassword"
              :input   {:f etcdserverpb/new-AuthUserChangePasswordRequest :ch input}
              :output  {:f etcdserverpb/pb->AuthUserChangePasswordResponse :ch output}}]
    (-> (send-unary-params input params)
        (p/then (fn [_] (invoke-unary client desc output))))))

