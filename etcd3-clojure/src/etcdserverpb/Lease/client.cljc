;;;----------------------------------------------------------------------------------
;;; Generated by protoc-gen-clojure.  DO NOT EDIT
;;;
;;; GRPC etcdserverpb.Lease Client Implementation
;;;----------------------------------------------------------------------------------
(ns etcdserverpb.Lease.client
  (:require [etcdserverpb :refer :all]
            [authpb :as authpb]
            [mvccpb :as mvccpb]
            [clojure.core.async :as async]
            [protojure.grpc.client.utils :refer [send-unary-params invoke-unary]]
            [promesa.core :as p]
            [protojure.grpc.client.api :as grpc]))

;-----------------------------------------------------------------------------
; GRPC Client Implementation
;-----------------------------------------------------------------------------

(defn LeaseGrant
  [client params]
  (let [input (async/chan 1)
        output (async/chan 1)
        desc {:service "etcdserverpb.Lease"
              :method  "LeaseGrant"
              :input   {:f etcdserverpb/new-LeaseGrantRequest :ch input}
              :output  {:f etcdserverpb/pb->LeaseGrantResponse :ch output}}]
    (-> (send-unary-params input params)
        (p/then (fn [_] (invoke-unary client desc output))))))

(defn LeaseRevoke
  [client params]
  (let [input (async/chan 1)
        output (async/chan 1)
        desc {:service "etcdserverpb.Lease"
              :method  "LeaseRevoke"
              :input   {:f etcdserverpb/new-LeaseRevokeRequest :ch input}
              :output  {:f etcdserverpb/pb->LeaseRevokeResponse :ch output}}]
    (-> (send-unary-params input params)
        (p/then (fn [_] (invoke-unary client desc output))))))

(defn LeaseKeepAlive
  [client params reply]
  (let [desc {:service "etcdserverpb.Lease"
              :method  "LeaseKeepAlive"
              :input   {:f etcdserverpb/new-LeaseKeepAliveRequest :ch params}
              :output  {:f etcdserverpb/pb->LeaseKeepAliveResponse :ch reply}}]
    (grpc/invoke client desc)))

(defn LeaseTimeToLive
  [client params]
  (let [input (async/chan 1)
        output (async/chan 1)
        desc {:service "etcdserverpb.Lease"
              :method  "LeaseTimeToLive"
              :input   {:f etcdserverpb/new-LeaseTimeToLiveRequest :ch input}
              :output  {:f etcdserverpb/pb->LeaseTimeToLiveResponse :ch output}}]
    (-> (send-unary-params input params)
        (p/then (fn [_] (invoke-unary client desc output))))))

