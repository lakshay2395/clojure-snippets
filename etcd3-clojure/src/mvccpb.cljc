;;;----------------------------------------------------------------------------------
;;; Generated by protoc-gen-clojure.  DO NOT EDIT
;;;
;;; Message Implementation of package mvccpb
;;;----------------------------------------------------------------------------------
(ns mvccpb
  (:require [protojure.protobuf.protocol :as pb]
            [protojure.protobuf.serdes.core :refer :all]
            [protojure.protobuf.serdes.complex :refer :all]
            [protojure.protobuf.serdes.utils :refer [tag-map]]
            [protojure.protobuf.serdes.stream :as stream]
            [clojure.set :as set]
            [clojure.spec.alpha :as s]))

;;----------------------------------------------------------------------------------
;;----------------------------------------------------------------------------------
;; Forward declarations
;;----------------------------------------------------------------------------------
;;----------------------------------------------------------------------------------

(declare cis->KeyValue)
(declare ecis->KeyValue)
(declare new-KeyValue)
(declare cis->Event)
(declare ecis->Event)
(declare new-Event)

;;----------------------------------------------------------------------------------
;;----------------------------------------------------------------------------------
;; Enumerations
;;----------------------------------------------------------------------------------
;;----------------------------------------------------------------------------------

;-----------------------------------------------------------------------------
; Event-EventType
;-----------------------------------------------------------------------------
(def Event-EventType-val2label {
  0 :put
  1 :delete})

(def Event-EventType-label2val (set/map-invert Event-EventType-val2label))

(defn cis->Event-EventType [is]
  (let [val (cis->Enum is)]
    (get Event-EventType-val2label val val)))

(defn- get-Event-EventType [value]
  {:pre [(or (int? value) (contains? Event-EventType-label2val value))]}
  (get Event-EventType-label2val value value))

(defn write-Event-EventType [tag options value os]
  (write-Enum tag options (get-Event-EventType value) os))



;;----------------------------------------------------------------------------------
;;----------------------------------------------------------------------------------
;; Message Implementations
;;----------------------------------------------------------------------------------
;;----------------------------------------------------------------------------------

;-----------------------------------------------------------------------------
; KeyValue
;-----------------------------------------------------------------------------
(defrecord KeyValue [key create-revision mod-revision version value lease]
  pb/Writer

  (serialize [this os]
    (write-Bytes 1  {:optimize true} (:key this) os)
    (write-Int64 2  {:optimize true} (:create-revision this) os)
    (write-Int64 3  {:optimize true} (:mod-revision this) os)
    (write-Int64 4  {:optimize true} (:version this) os)
    (write-Bytes 5  {:optimize true} (:value this) os)
    (write-Int64 6  {:optimize true} (:lease this) os)))

(s/def :mvccpb.messages.KeyValue/key bytes?)
(s/def :mvccpb.messages.KeyValue/create-revision int?)
(s/def :mvccpb.messages.KeyValue/mod-revision int?)
(s/def :mvccpb.messages.KeyValue/version int?)
(s/def :mvccpb.messages.KeyValue/value bytes?)
(s/def :mvccpb.messages.KeyValue/lease int?)
(s/def ::KeyValue-spec (s/keys :opt-un [:mvccpb.messages.KeyValue/key :mvccpb.messages.KeyValue/create-revision :mvccpb.messages.KeyValue/mod-revision :mvccpb.messages.KeyValue/version :mvccpb.messages.KeyValue/value :mvccpb.messages.KeyValue/lease ]))
(def KeyValue-defaults {:key (byte-array 0) :create-revision 0 :mod-revision 0 :version 0 :value (byte-array 0) :lease 0 })

(defn cis->KeyValue
  "CodedInputStream to KeyValue"
  [is]
  (->> (tag-map KeyValue-defaults
         (fn [tag index]
             (case index
               1 [:key (cis->Bytes is)]
               2 [:create-revision (cis->Int64 is)]
               3 [:mod-revision (cis->Int64 is)]
               4 [:version (cis->Int64 is)]
               5 [:value (cis->Bytes is)]
               6 [:lease (cis->Int64 is)]

               [index (cis->undefined tag is)]))
         is)
        (map->KeyValue)))

(defn ecis->KeyValue
  "Embedded CodedInputStream to KeyValue"
  [is]
  (cis->embedded cis->KeyValue is))

(defn new-KeyValue
  "Creates a new instance from a map, similar to map->KeyValue except that
  it properly accounts for nested messages, when applicable.
  "
  [init]
  {:pre [(if (s/valid? ::KeyValue-spec init) true (throw (ex-info "Invalid input" (s/explain-data ::KeyValue-spec init))))]}
  (-> (merge KeyValue-defaults init)
      (map->KeyValue)))

(defn pb->KeyValue
  "Protobuf to KeyValue"
  [input]
  (cis->KeyValue (stream/new-cis input)))

;-----------------------------------------------------------------------------
; Event
;-----------------------------------------------------------------------------
(defrecord Event [type kv prev-kv]
  pb/Writer

  (serialize [this os]
    (write-Event-EventType 1  {:optimize true} (:type this) os)
    (write-embedded 2 (:kv this) os)
    (write-embedded 3 (:prev-kv this) os)))

(s/def :mvccpb.messages.Event/type (s/or :keyword keyword? :int int?))


(s/def ::Event-spec (s/keys :opt-un [:mvccpb.messages.Event/type ]))
(def Event-defaults {:type (Event-EventType-val2label 0) })

(defn cis->Event
  "CodedInputStream to Event"
  [is]
  (->> (tag-map Event-defaults
         (fn [tag index]
             (case index
               1 [:type (cis->Event-EventType is)]
               2 [:kv (ecis->KeyValue is)]
               3 [:prev-kv (ecis->KeyValue is)]

               [index (cis->undefined tag is)]))
         is)
        (map->Event)))

(defn ecis->Event
  "Embedded CodedInputStream to Event"
  [is]
  (cis->embedded cis->Event is))

(defn new-Event
  "Creates a new instance from a map, similar to map->Event except that
  it properly accounts for nested messages, when applicable.
  "
  [init]
  {:pre [(if (s/valid? ::Event-spec init) true (throw (ex-info "Invalid input" (s/explain-data ::Event-spec init))))]}
  (-> (merge Event-defaults init)
      (cond-> (contains? init :kv) (update :kv new-KeyValue))
      (cond-> (contains? init :prev-kv) (update :prev-kv new-KeyValue))
      (map->Event)))

(defn pb->Event
  "Protobuf to Event"
  [input]
  (cis->Event (stream/new-cis input)))

